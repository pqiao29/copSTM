% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/copSTM.R
\name{copSTM}
\alias{copSTM}
\title{Fitting copula-based Multivariate spatio-temporal model}
\usage{
copSTM(x, y, K, n, marginal, cor_type = "both", temporal = TRUE,
  maxit = 100, eps = 0.1, std_err = F, B = 100, Message_prog = F)
}
\arguments{
\item{x}{A matrix of covariates, 
needs to be generated by \code{make_data} or \code{sim_data} if \code{temporal} == TRUE, 
otherwise could be any matrix.}

\item{y}{A vector of count data response. 
Required to be organized as 
\eqn{(y_{i, t, k}) = (y_{1, 1, 1}, \dots, y_{1, 1, K}, y_{2, 1, 1}, \dots, y_{2, 1, K}, 
\dots, y_{n^2, 1, K}, y_{1, 2, 1}, \dots, y_{n^2, T, K})}, 
where \eqn{(i, t, k)} denotes the indice of tile, time point and group respectively.}

\item{K}{The number of groups.}

\item{n}{An integer number, the image is tilled into n*n grids.}

\item{marginal}{Marginal distribution: "pois" for Poisson, "nbinom" for negative binomial.}

\item{cor_type}{Correlation type. 
\itemize{
\item \code{sp}: Spatial only, consider only correlation of the same group from neighbouring tiles,
\item \code{mv}: Multivariate only, consider only correlation between different groups in the same tile,
\item \code{both}: Both "sp" and "mv", as well as between-group correlation from neighbouring tiles,
\item \code{ind}: Independent, \code{copSTM} is equivalent to GLM, please enter K = 1 and n = 1.
}}

\item{temporal}{Logical, if the data should be treated as temporal data. 
If TRUE, the output of regression coefficients takes the form of a K by K matrix, see \code{\link{idpSTM}} for details. 
Also the computation of standard errors requires bootstrapping, see argument \code{std_err} for details.}

\item{maxit}{Maximum number of iterations of maximum likelihood estimation (default 100).}

\item{eps}{Convergence threshold for maximum likelihood estimation (default 0.1).}

\item{std_err}{Logical, if TRUE returns standard errors of all parameters. 
If \code{std_err == TRUE && temporal == TRUE}, standard error estimation requires bootstrapping, 
therefore, user needs to specify the bootstrap sample size \code{B}.}

\item{B}{The number of bootstrap samples to be generated for computing the standard error of parameters (default 100).
Required only when \code{std_err == TRUE && temporal == TRUE}.}

\item{Message_prog}{Logical, if TRUE, prints messages indicating progress. 
If \code{std_err == TRUE && temporal == TRUE}, computational time is expected to be much longer than \code{std_err == FALSE}, 
 (depend also on the size of \code{B}), Therefore in this case, it is recomended to set \code{Message_prog} to be TRUE,}
}
\value{
A list with components
\itemize{
\item \code{likelihood:}   Maximized log-likelihood. 
\item \code{coefficients:} A list of parameter estimates: 
                    \itemize{
                      \item \code{intercepts:}  A separate intercept for each group,
                       \item \code{main_effects:}  Regression coefficients,
                       \item \code{correlations:} Spatial and multivariate correlations of observations at the same time point, 
                        \item \code{dispersion:} Overdispersion parameter, returned only when \code{marginal == "nbinom"}. }
\item \code{standard_error:}  A list of estimated standard errors, in the same format as \code{coefficients}. Returned only if \code{std_err == TRUE}. 
}
}
\description{
\code{copSTM} fits a Gaussian copula-based model on grouped spatial-temporal lattice data. 
Data is assumed to be observed on an \code{n} by \code{n} lattice. 
Observation in each tile could be multivariate, with dimension K. 
It is required that \code{length(y)/(K*n^2)} is an integer. 
If data is temporal, this is considered as the number of time points,
otherwise, the number of independent samples.
}
\examples{
### Ex1. 
K <- 2
n <- 10
t_size <- 10
true_beta <- c(-1, 1, 0.5, -0.5, 0, 1) # i.e. Intercept: -1, -0.5
true_rho <- c(-0.3, 0, 0.3, 0)
sim_dat <- sim_data(n, K, temporal = TRUE, t_size, marginal = "pois",
                    true_beta, true_rho, cor_type = "both")
# in the same form returned by make_data
est1 <- copSTM(sim_dat$covariates, sim_dat$response, K, n, marginal = "pois",
               cor_type = "both", temporal = TRUE, maxit = 50,
               std_err = FALSE) 
cat("\\n true regression coefficients: ", c(matrix(true_beta, K+1, K)[-1, ]), "\\n", 
    "estimated regression coefficients: ", round(est1$coefficients$main_effects, 2), "\\n\\n", 
    "true correlation parameters: ", true_rho, "\\n", 
    "estimated correlation parameters: ", round(est1$coefficients$correlations, 2))

### Ex2. 
true_rho <- 0.3
sim_dat <- sim_data(n, K, temporal = TRUE, t_size, marginal = "pois",
                    true_beta, true_rho, cor_type = "mv")
est2 <- copSTM(sim_dat$covariates, sim_dat$response, K, n, marginal = "pois", 
               cor_type = "mv", temporal = TRUE, maxit = 50,
               std_err = TRUE, B = 30, Message_prog = TRUE)
cat("\\n true regression coefficients: ", c(matrix(true_beta, K+1, K)[-1, ]), "\\n", 
   "estimated regression coefficients: ", round(est2$coefficients$main_effects, 2), "\\n\\n", 
    "true correlation parameters: ", true_rho, "\\n", 
    "estimated correlation parameters: ", round(est2$coefficients$correlations, 2))
print(est2$standard_error)

### Ex3. 
true_rho <- c(0.3, 0.5)
dispersion <- 1
sim_dat <- sim_data(n, K, temporal = FALSE, t_size = 1, 
                    true_beta, true_rho, cor_type = "sp", 
                    marginal = "nbinom", dispersion = dispersion)
est3 <- suppressWarnings(copSTM(sim_dat$covariates, sim_dat$response, K, n, marginal = "nbinom",
                                cor_type = "sp", temporal = FALSE, maxit = 100,
                                std_err = FALSE) )
cat("\\n true regression coefficients: ", c(matrix(true_beta, K+1, K)[-1, ]), "\\n", 
    "estimated regression coefficients: ", round(est3$coefficients$main_effects, 2), "\\n\\n", 
    "true correlation parameters: ", true_rho, "\\n", 
    "estimated correlation parameters: ", round(est3$coefficients$correlations, 2), "\\n\\n", 
    "true dispersion parameter: ", dispersion, "\\n",
    "estimated dispersion parameter: ", round(est3$coefficients$dispersion, 2))
    
    
### with real data (expected around 40s)
\dontrun{
data("cell_growth_data") 
n <- 25
dat <- make_data(cell_growth_data, n)
K <- dat$K
est_cop_real <- copSTM(dat$covariates, dat$response, dat$K, n, marginal = "pois",
                       cor_type = "both", temporal = TRUE, maxit = 50, 
                       std_err = FALSE)
print(est_cop_real$coefficients$main_effects)
cor0 <- matrix(NA, K, K)
cor1 <- matrix(NA, K, K)
diag(cor0) <- 1
diag(cor1) <- est_cop_real$coefficients$correlations[1:dat$K]
ind_r = K + 1
for(i in 1:(K - 1)){
  for(j in (i + 1):K){
    cor0[i, j] <- est_cop_real$coefficients$correlations[ind_r]
    ind_r = ind_r + 1
  }
}
for(i in 1:(K - 1)){
  for(j in (i + 1):K){
    cor1[i, j] <- est_cop_real$coefficients$correlations[ind_r]
    ind_r = ind_r + 1
  }
}
print("correlation in the same tile: ")
print(round(cor0, 3))
print("correlation in neighbouring tiles: ")
print(round(cor1, 3))
}

}
\seealso{
\code{\link{sim_data}}, \code{\link{make_data}}
}
